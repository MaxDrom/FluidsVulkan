#version 430
//#extension GL_EXT_debug_printf : enable
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

struct Boid {
    vec2 pos;
    vec2 vel;
    float density;
    float pressure;
};


layout(std430, binding = 0) buffer boidsBufferIn
{
    Boid boids_in[];
};

layout(push_constant) uniform PushConstants {
    uint bufferLength;
    float delta;
}push;


//const vec2 blackHolePos = vec2(0.5, 0.5);
//const float minr = 0.01;
//
//void handleCollisionWithBH(Boid boid)
//{
//    vec2 toBlackHole = blackHolePos - boid.pos;
//    float r = length(toBlackHole);
//    if( r< 0.0000001)
//        return;
//    vec2 dir = toBlackHole/r;
//    if(r<minr)
//    {
//        boid.pos = minr*dir;
//        boid.vel = boid.vel - 2*dot(boid.vel, dir)*dir;
//    }
//    
//}

void main()
{
    uint id = gl_GlobalInvocationID.x;
    if(id>=push.bufferLength)
    return;
    
    Boid boid = boids_in[id];
//    if(length(boid.vel) > 0.5)
//        boid.vel = normalize(boid.vel)*0.5;
    boid.pos += boid.vel*push.delta;
//    if(boid.pos.x <0)
//    {
//        boid.pos.x = 0;
//        boid.vel.x = 0.95*abs(boid.vel.x);
//    }
//    if(boid.pos.y <0)
//    {
//        boid.pos.y = 0;
//        boid.vel.y = 0.95*abs(boid.vel.y);
//    }
//    if(boid.pos.x >1)
//    {
//        boid.pos.x = 1;
//        boid.vel.x = -0.95*abs(boid.vel.x);
//    }
//    if(boid.pos.y >1)
//    {
//        boid.pos.y = 1;
//        boid.vel.y = -0.95*abs(boid.vel.y);
//    }

   // handleCollisionWithBH(boid);
    boids_in[id] = boid;
}



