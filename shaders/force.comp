#version 430
//#extension GL_EXT_debug_printf : enable
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

struct Boid {
    vec2 pos;
    vec2 vel;
    float density;
    float pressure;
};

layout(std430, binding = 0) readonly buffer boidsBufferIn {
    Boid boids_in[];
};


layout(std430, binding = 2) writeonly buffer boidsBufferOut {
    Boid boids_out[];
};

layout(binding=3, r32ui) readonly uniform uimage2D prefixSum;

layout(push_constant) uniform PushConstants {
    uint bufferLength;
    float perceptionRadius;
    float delta;
    float targetDensity;
    float densityMult;
    float viscosityMult;
}push;

ivec2 imSize = imageSize(prefixSum);
ivec2 posmod(ivec2 x, ivec2 y) {
    return (x % y + y) % y;
}
ivec2 getTexCoords(uint id) {
    return ivec2(id%imSize.x, id/imSize.x);
}
const uint maxSteps = 1024*1024;
const float PI = radians(180);


float ViscSmoothFunction(float radius, float dist) {
    radius = radius*256;
    dist = dist*256;
    float volume = PI*pow(radius, 8)/4;
    float value = max(0, radius*radius - dist*dist);
    return value*value*value/volume;
}
float SmoothFunction(float radius, float dist) {
    radius = radius*256;
    dist = dist*256;
    float volume = PI*pow(radius, 5)/10;
    float value = max(0, radius - dist);
    return value*value*value/volume;
}

float volume = PI*pow(push.perceptionRadius*256, 5)/10;
float SmoothFunctionSlope(float radius, float dist) {
    radius = radius*256;
    dist = dist*256;
    //float volume = PI*pow(radius, 5)/10;
    float value = max(0, radius - dist);
    return -3*value*value/volume;
}
float targetDensity = push.targetDensity;//10;
float densityMult = push.densityMult;//10;
float Pressure(float density) {
    float error = (density - targetDensity);
    return error*densityMult;
}
const vec2 blackHolePos = vec2(0.5, 0.5);
vec2 forceToBlackHole(vec2 pos) {
    vec2 toBlackHole = blackHolePos - pos;
    float d = length(toBlackHole);
    float r = max(length(toBlackHole), 0.01);
    if (d < 0.00001)
    return vec2(0);
    return 0.01*normalize(toBlackHole)/(r*r);
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id>=push.bufferLength)
    return;

    Boid boid = boids_in[id];
    ivec2 grid_id = ivec2(floor(boid.pos*(imSize-ivec2(1))));

    int y_end = grid_id.y+2;
    int y_start = grid_id.y-1;
    int x_end = grid_id.x+2;
    int x_start = grid_id.x-1;

    vec2 force = vec2(0);
    vec2 averageVel = vec2(0);

    for (int y = y_start; y<y_end; y++) {
        for (int x = x_start; x< x_end; x++) {

            ivec2 cell = posmod(ivec2(x, y), imSize);
            int cell_ind = cell.x+cell.y*imSize.x;
            int previos_cell = cell_ind - 1;
            int start_ind = 0;
            if (previos_cell >= 0)
            {
                start_ind = int(imageLoad(prefixSum, getTexCoords(previos_cell)).r);
            }
            ivec2 previos_cell_coords = getTexCoords(previos_cell);
            //debugPrintfEXT("%i %i %i %i", cell.x, cell.y, previos_cell_coords.x, previos_cell_coords.y);
            int end_ind = min(int(imageLoad(prefixSum, cell).r), int(start_ind + maxSteps));
            for (uint i = start_ind; i< end_ind; i++) {
                if (i == id)
                continue;
                Boid neign = boids_in[i];
                vec2 dist = boid.pos-neign.pos;

                float d = length(dist);

                if (d>=push.perceptionRadius)
                continue;
                averageVel+=ViscSmoothFunction(push.perceptionRadius, d)/neign.density*(neign.vel-boid.vel);
                float slope = SmoothFunctionSlope(push.perceptionRadius, d);
                float density = neign.density;
                float p = (Pressure(density) + Pressure(boid.density))/2;
                if (d>0.000001) {
                    vec2 dir = normalize(dist);
                    force -= p*slope*dir/density;
                }
                else
                force += vec2(1, 0)*p*slope/density;
            }
        }
    }
    //debugPrintfEXT("%f", length(force));
    //    boid.pressure = Pressure(boid.density);
    force += push.viscosityMult*averageVel*length(averageVel);// - 2*boid.vel*length(boid.vel);
    //debugPrintfEXT("%f", boid.density);
    boid.vel += force/boid.density*push.delta+forceToBlackHole(boid.pos)*push.delta;

    boids_out[id] = boid;
}

