#version 430
//#extension GL_EXT_debug_printf : enable
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

struct Boid {
    vec2 pos;
    vec2 vel;
    float density;
    float pressure;
};

layout(std430, binding = 0) buffer boidsBufferIn
{
    Boid boids_in[];
};


layout(binding=2, r32ui) readonly uniform uimage2D prefixSum;

layout(push_constant) uniform PushConstants {
    uint bufferLength;
    float perceptionRadius;
}push;

ivec2 imSize = imageSize(prefixSum);

ivec2 posmod(ivec2 x, ivec2 y) {
    return (x % y + y) % y;
}
ivec2 getTexCoords(uint id) {
    return ivec2(id%imSize.x, id/imSize.x);
}
const uint maxSteps = 1024*1024;
const float PI = radians(180);

float SmoothFunction(float radius, float dist)
{
    radius = radius*256;
    dist = dist*256;
    float volume = PI*pow(radius, 5)/10;
    float value = max(0, radius - dist);
    return value*value*value/volume;
}

void main()
{
    uint id = gl_GlobalInvocationID.x;
    if (id>=push.bufferLength)
    return;

    Boid boid = boids_in[id];
    ivec2 grid_id = ivec2(floor(boid.pos*(imSize-ivec2(1))));

    int y_end = grid_id.y+2;
    int y_start = grid_id.y-1;
    int x_end = grid_id.x+2;
    int x_start = grid_id.x-1;

    float density = 0;

    for (int y = y_start; y<y_end; y++)
    {
        for (int x = x_start; x< x_end; x++) {
            ivec2 cell = posmod(ivec2(x, y), imSize);
            int cell_ind = cell.x+cell.y*imSize.x;
            int previos_cell = cell_ind - 1;
            uint start_ind = 0;
            if (previos_cell >= 0)
            {
                start_ind = imageLoad(prefixSum, getTexCoords(previos_cell)).r;
            }
            ivec2 previos_cell_coords = getTexCoords(previos_cell);
            uint end_ind = min(imageLoad(prefixSum, cell).r, start_ind + maxSteps);
            
            for (uint i = start_ind; i< end_ind; i++)
            {
                Boid neign = boids_in[i];
                vec2 dist = boid.pos-neign.pos;
                float d = length(dist);
                
                if (d>=push.perceptionRadius)
                continue;

                density += SmoothFunction(push.perceptionRadius, d);
                
            }
        }
    }
    boids_in[id].density = density;
}




